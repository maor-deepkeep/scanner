services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  # Model-total
  model-total:
    build: .
    container_name: model-total
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - backend_data:/data
      # Optional dev hot-reload bind mount.
      # If your host path (/deepkeep-dev/...) is NOT shared in Docker Desktop, set CODE_PATH to a shared path
      # (e.g. export CODE_PATH=/Users/you/dev/deepkeep-sentry/microservices/model_scanner/app)
      # or remove this line to avoid mount errors.
      - type=bind,source=${CODE_PATH:-./app},target=/app/app,read_only=true
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017
      - REDIS_URL=redis://redis:6379
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    networks:
      - backend
    depends_on:
      - mongodb
      - redis
      - minio
      - tasks_worker
  
  # Worker scanner
  tasks_worker:
    build: .
    container_name: tasks-worker
    command: celery -A app.tasks.tasks.celery_app worker --loglevel=info --concurrency=8
    environment:
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://admin:password123@mongodb:27017
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      OFFLINE_MODE: 'true'
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    volumes:
      - backend_data:/data
      # Optional dev hot-reload (same notes as above). Remove if not needed.
      - type=bind,source=${CODE_PATH:-./app},target=/app/app,read_only=true
    networks:
      - backend
    depends_on:
      - redis
      - mongodb
      - minio
    extra_hosts:
      - "host.docker.internal:host-gateway"

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    # Rewritten entrypoint: use YAML list to avoid compose interpolation errors.
    # All $ -> $$ so shell expands them inside container (compose won't).
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -e
        /usr/bin/minio server /data --console-address ':9001' &
        pid=$$!
        echo 'Waiting for MinIO...'
        if command -v wget >/dev/null 2>&1; then
          DL_HEALTH='wget -q -O -'
          DL_FILE='wget -q -O'
        elif command -v curl >/dev/null 2>&1; then
          DL_HEALTH='curl -s'
          DL_FILE='curl -s -o'
        else
          echo 'Need wget or curl in image'; exit 1
        fi
        until $$DL_HEALTH http://localhost:9000/minio/health/ready >/dev/null 2>&1; do
          sleep 1
        done
        echo 'MinIO ready, configuring bucket...'
        $$DL_FILE /usr/local/bin/mc https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x /usr/local/bin/mc
        /usr/local/bin/mc alias set local http://localhost:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD
        /usr/local/bin/mc mb --ignore-existing local/model-total-string
        /usr/local/bin/mc anonymous set download local/model-total-string
        echo 'Bucket model-total-string is public (download).'
        wait $$pid
    networks:
      - backend

networks:
  backend:
    name: backend_network

volumes:
  mongodb_data:
    name: mongodb_data
  minio_data:
    name: minio_data
  backend_data:
    name: backend_data